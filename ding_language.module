<?php

/**
 * @file
 * Multilanguage functionality for easySuite.
 */

include_once 'ding_language.features.inc';

/**
 * Implements hook_views_query_alter().
 */
function ding_language_views_query_alter(&$view, &$query) {
  $enabled_views = views_get_enabled_views();

  $content_modules = [
    'ding_eresource',
    'ding_event',
    'ding_news',
    'ding_library',
    'ding_groups',
  ];

  $processed_views = [];
  foreach ($enabled_views as $module) {
    if (in_array($module->name, $content_modules)) {
      $display_names = array_keys($module->display);
      $processed_views[] = $display_names;
    }
  }

  $inlined = call_user_func_array('array_merge', $processed_views);

  foreach ($inlined as $item) {
    if ($view->current_display == $item) {
      $query->where[1]['conditions'][] = [
        'field' => 'node.language',
        'operator' => '=',
        'value' => [
          '***CURRENT_LANGUAGE***' => '***CURRENT_LANGUAGE***',
        ],
      ];
    }
  }
}

/**
 * Implements hook_search_api_views_query_alter().
 */
function ding_language_search_api_views_query_alter(view &$view, SearchApiViewsQuery &$query) {
  global $language;

  $idx_id = db_select('search_api_index', 'sai')
    ->fields('sai', ['id'])
    ->condition('machine_name', 'default_multiple_index', '=')
    ->execute()
    ->fetchField();

  $index = search_api_index_load($idx_id);
  $fields = array(
    'options' => $index->options,
  );
  if (empty($fields['options']['fields']['node:language'])) {
    $fields['options']['fields']['node:language'] = [
      'type' => 'string',
    ];

    search_api_index_edit($index->id, $fields);
    try {
      search_api_index_items($index);
    }
    catch (Exception $e) {
      watchdog('error', $e->getMessage());
    }
  }

  $query->where[1]['conditions'][0] = [
    '0' => 'node:language',
    '1' => $language->language,
    '2' => '=',
  ];
}

/**
 * Implements hook_query_TAG_alter().
 */
function ding_language_query_language_alter(QueryAlterableInterface $query) {
  global $language;
  $query->condition('n.language', $language->language, '=');
}

/**
 * Implements hook_form_alter().
 */
function ding_language_form_alter(&$form, &$form_state, $form_id) {
  // Filtering "Library" field of ding_event and ding_news node form.
  if ($form_id == 'ding_event_node_form' || $form_id == 'ding_news_node_form') {
    global $language;

    $rels = $form['og_group_ref'][LANGUAGE_NONE]['#options'];
    if (isset($rels['_none'])) {
      unset($rels['_none']);
    }

    $nids = [];
    foreach ($rels as $key => $rel) {
      $nids[] = $key;
    }

    $nodes = node_load_multiple($nids);

    $current_lang_rels = [];
    foreach ($nodes as $node) {
      if ($node->language == $language->language) {
        $current_lang_rels[$node->nid] = $node->title;
      }
    }

    $current_lang_rels = ['_none' => t('- None -')] + $current_lang_rels;

    $form['og_group_ref'][LANGUAGE_NONE]['#options'] = $current_lang_rels;
  }
}

/**
 * Implements hook_post_features_revert().
 */
function ding_language_post_features_revert($component) {
  // Enable detection of language from URL.
  $negotiation = array(
    'locale-url' => array(
      'callbacks' => array(
        'language' => 'locale_language_from_url',
        'switcher' => 'locale_language_switcher_url',
        'url_rewrite' => 'locale_language_url_rewrite_url',
      ),
      'file' => 'includes/locale.inc',
    ),
    'language-default' => array(
      'callbacks' => array(
        'language' => 'language_from_default',
      ),
    ),
  );

  variable_del('language_negotiation_language');
  variable_set('language_negotiation_language', $negotiation);

  // Set custom path to language icons.
  variable_set('languageicons_path', 'https://storage.easyting.dk/icons/*.png');

  // Enable multilanguage support for content types.
  $content_types = node_type_get_types();
  foreach ($content_types as $content_type) {
    variable_set('language_content_type_' . $content_type->type, 2);
  }


  if (!module_exists('i18n_taxonomy')) {
    module_enable(array('i18n_taxonomy'));
  }

  // Enable localization for taxonomy vocabularies.
  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $vocabulary) {
    db_update('taxonomy_vocabulary')
      ->fields(array(
        'i18n_mode' => 1,
      ))
      ->execute();

    i18n_string_object_update('taxonomy_vocabulary', $vocabulary);
  }

  variable_set('ding_language_random', rand());
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ding_language_preprocess_menu_block_wrapper(&$variables) {
  if ($variables['config']['menu_name'] == 'menu-secondary-menu') {
    if ($variables['config']['disabled'] == FALSE) {
      // Fetching "Secondary menu" pane metadata.
      $query = db_select('panels_pane', 'pp')
        ->fields('pp', ['pid', 'did'])
        ->condition('panel', 'navigation', '=')
        ->condition('subtype', 'menu_block-2', '=')
        ->execute()
        ->fetchAll();

      $pane_metadata = reset($query);

      // Loading "Navigation" display.
      $display = panels_load_display($pane_metadata->did);

      if (!empty($display)) {
        $pane = $display->content[$pane_metadata->pid];
        // Disabling "Secondary menu" block.
        $pane->shown = 0;

        // Load "Language switcher" pane.
        $new_pane = panels_new_pane('block', 'locale-language', TRUE);
        $new_pane->configuration = [
          'override_title' => 1,
          'override_title_text' => '',
          'override_title_heading' => 'h2',
        ];
        $display->add_pane($new_pane, 'navigation');

        // Save whole display.
        panels_save_display($display);
      }
    }
  }
}

/**
 * Implements hook_panels_pre_render().
 */
function ding_language_panels_pre_render($panels_display, $renderer) {
  $context = $panels_display->context;
  if (!empty($context['argument_term_1']) && $context['argument_term_1']->plugin == 'entity:taxonomy_term') {
    if (!empty($context['argument_term_1']->data)) {
      $term_tid = $context['argument_term_1']->data->tid;
      $term = i18n_taxonomy_localize_terms(taxonomy_term_load($term_tid));
      $panels_display->context['argument_term_1']->data = $term;
      $panels_display->title = $term->name;

      $trail = menu_get_active_trail();

      $trail[1]['title'] = $term->name;

      menu_set_active_trail($trail);
    }
  }
}

/**
 * Implements hook_preprocess().
 */
function ding_language_preprocess(&$variables, $hook) {
  switch ($hook) {
    case 'views_view_fields':
      if (!empty($variables['fields']['field_ding_eresource_category'])) {
        $tid = reset($variables['view']->args);
        $localized_term = i18n_taxonomy_localize_terms(taxonomy_term_load($tid));
        $category_field = $variables['fields']['field_ding_eresource_category'];

        $build_string = [
          '#type' => 'markup',
          '#markup' => "<{$category_field->element_type}>$localized_term->name</{$category_field->element_type}>"
        ];

        $category_field->content = drupal_render($build_string);

        $variables['fields']['field_ding_eresource_category'] = $category_field;
      }
      break;

    case 'node':
      $fields =  ['field_ding_eresource_category', 'field_ding_event_target', 'field_ding_news_category'];
      foreach ($fields as $field) {
        if (!empty($variables['content'][$field])) {
          $tid = $variables[$field][0]['tid'];
          $localized_term = i18n_taxonomy_localize_terms(taxonomy_term_load($tid));

          $variables['content'][$field]['#items'][0]['taxonomy_term'] = $localized_term;
          $variables['elements'][$field][0]['#markup'] = $localized_term->name;

          if ($field == 'field_ding_news_category') {
            $output = $localized_term->name;
          }
          else {
            $output = l($localized_term->name, 'taxonomy/term/' . $tid);
          }

          $variables['content'][$field][0] = $output;
        }
      }
      break;

    case 'entity':
      if ($variables['entity_type'] == 'profile2') {
        $tid = $variables['content']['field_ding_staff_department']['#items'][0]['tid'];
        $translated = i18n_taxonomy_localize_terms(taxonomy_term_load($tid));
        $variables['content']['field_ding_staff_department'][0]['#title'] = $translated->name;
      }
      break;
  }
}

/**
 * Implements hook_field_attach_view_alter().
 */
function ding_language_field_attach_view_alter(&$output, $context) {
  foreach (element_children($output) as $field_name) {
    $element = &$output[$field_name];
    if ($element['#field_type'] == 'taxonomy_term_reference' && $element['#formatter'] == 'taxonomy_term_reference_link') {
      foreach ($element['#items'] as $delta => $item) {
        $tid = $item['tid'];
        $translated_term = i18n_taxonomy_localize_terms(taxonomy_term_load($tid));
        $element[$delta]['#title'] = $translated_term->name;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ding_language_form_customerror_admin_settings_alter(&$form, &$form_state, $form_id) {
  $languages = language_list();

  $group_404 = $form['customerror_404_group'];

  $title = $group_404['customerror_404_title'];
  $body = $group_404['customerror_404'];
  $default_err_response = variable_get('customerror_404', []);

  $group_404['default'] = [
    '#type' => 'fieldset',
    '#title' => t('Default'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];

  $group_404['default']['customerror_404_title'] = $title;
  $group_404['default']['customerror_404'] = $body;

  foreach ($languages as $code => $lang) {
    $group_404[$lang->language] = [
      '#type' => 'fieldset',
      '#title' => $lang->name,
      '#description' => t('Customerror values for @language language. If empty, values from "Default" group are used.', ['@language' => $lang->name]),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    ];

    $group_404[$lang->language]['customerror_404_title_' . $code] = $title;
    $group_404[$lang->language]['customerror_404_title_' . $code]['#title'] = $lang->name . ': ' . $title['#title'];
    $group_404[$lang->language]['customerror_404_title_' . $code]['#default_value'] = !empty(variable_get('customerror_404_title_' . $code)) ? variable_get('customerror_404_title_' . $code) : variable_get('customerror_404_title');

    $err_response = variable_get('customerror_404_' . $lang->language, []);
    $group_404[$lang->language]['customerror_404_' . $code] = $body;
    $group_404[$lang->language]['customerror_404_' . $code]['#title'] = $lang->name . ': ' . $body['#title'];
    $group_404[$lang->language]['customerror_404_' . $code]['#default_value'] = !empty($err_response['value']) ? $err_response['value'] : $default_err_response['value'];
  }

  unset($group_404['customerror_404_title']);
  unset($group_404['customerror_404']);

  $form['customerror_404_group'] = $group_404;
}

/**
 * Implements hook_page_build().
 */
function ding_language_page_build(&$page) {
  global $language;
  $current_path = current_path();

  if ($current_path != 'customerror/404') {
    return;
  }

  $path = drupal_get_normal_path(variable_get('site_404', ''));

  if ($path == $current_path) {
    $default_customerror_title = variable_get('customerror_404_title', '');
    $page_title = variable_get('customerror_404_title_' . $language->language, $default_customerror_title);
    drupal_set_title($page_title);

    $default_customerror_body = variable_get('customerror_404', []);
    $page_content = variable_get('customerror_404_' . $language->language, $default_customerror_body);
    $return = $page_content['value'];
    drupal_set_page_content($return);
  }
}
